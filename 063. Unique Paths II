A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

Note: m and n will be at most 100.

Example 1:

Input:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
Output: 2
Explanation:
There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

//第一版
//想到用递归的方法去做，但是这样时间复杂度较高，总是报错：Time Limit Exceeded
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int i = 0;
        int j = 0;
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if(obstacleGrid[i][j]==1||obstacleGrid[m-1][n-1]==1){
            return 0;
        }
        return count(obstacleGrid,i,j);
    }
    public int count(int[][] obstacleGrid,int i,int j){
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int num = 0;
        if(i==m-1&&j==n-1){
            return 1;
        }
        if(i<m-1&&obstacleGrid[i+1][j]!=1){
            num = num + count(obstacleGrid,i+1,j);
        }
        if(j<n-1&&obstacleGrid[i][j+1]!=1){
            num = num + count(obstacleGrid,i,j+1);
        }
        return num;
    }
}

//第二版
//遍历的方法，用数组count[m][n]来存储到达对应位置的路径数目
//1ms
//100%
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        
        int[][] count = new int[m][n];
        if(obstacleGrid[0][0]==1||obstacleGrid[m-1][n-1]==1){
            return 0;
        }
        count[0][0] = 1;
        
        for(int i = 1; i < m; i++){
            if(obstacleGrid[i][0] == 1){
                count[i][0] = 0;
            }else{
                count[i][0] = count[i-1][0];
            }
        }
        for(int j = 1; j < n; j++){
            if(obstacleGrid[0][j] == 1){
                count[0][j] = 0;
            }else{
                count[0][j] = count[0][j-1];
            }
        }
        
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                if(obstacleGrid[i][j] == 1){
                    count[i][j] = 0;
                }else{
                    count[i][j] = count[i-1][j] + count[i][j-1];
                }
            }
        }
        return count[m-1][n-1];
    }
}
