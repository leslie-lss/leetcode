/*
    Given numRows, generate the first numRows of Pascal's triangle.

    For example, given numRows = 5,
    Return

    [
         [1],
        [1,1],
       [1,2,1],
      [1,3,3,1],
     [1,4,6,4,1]
    ]
    
*/
//杨辉三角问题：每行的数字为其肩上的两个数字之和，两端数字均为一
//List的嵌套：构造时不能直接List套List，而是List<List<Integer>> result = new LinkedList<List<Integer>>();
//复制List：不能直接用等号来复制，利用addAll()函数来一个个添加
//在利用result.add(list)来添加队列时，也出现了list指向错误的问题，最好新建一个list1来读取list的列表，将list1添加到结果队列中
//3.20%
//2ms
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new LinkedList<List<Integer>>();
        if(numRows==0){
            return result;
        }
        List<Integer> list = new ArrayList<Integer>();
        for(int i = 0; i < numRows; i++){
            List<Integer> list1 = new ArrayList<Integer>();
            list1.addAll(list);
            for(int j = 1;j<i;j++){
                int a = 0;
                int b = 0;
                a = list.get(j-1);
                b = list.get(j);
                int temp = 0;
                temp = a+b;
                list1.set(j,temp);
            }
            list1.add(1);
            list.removeAll(list);
            list.addAll(list1);
            result.add(list1);
        }
        return result;
    }
}
