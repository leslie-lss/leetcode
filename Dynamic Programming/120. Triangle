/*******************************************************************************************
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:

Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.
*******************************************************************************************/

//4ms
//89.20%
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        if(n == 0){
            return 0;
        }
        int[] res = new int[n];
        for(int i = 0; i < n; i++){
            res[i] = Integer.MAX_VALUE;
        }
        if(triangle.get(0).size() == 0){
            return 0;
        }
        res[0] = triangle.get(0).get(0);
        for(int i = 1; i < n; i++){
            List<Integer> row = triangle.get(i);
            res[i] = res[i-1] + row.get(i);
            for(int j = i-1; j > 0; j--){
                int min = res[j] < res[j-1] ? res[j] : res[j-1];
                res[j] = min + row.get(j);
            }
            res[0] = res[0] + row.get(0);
        }
        int result = res[0];
        for(int i = 1; i < n; i++){
            if(res[i] < result){
                result = res[i];
            }
        }
        return result;
    }
}
