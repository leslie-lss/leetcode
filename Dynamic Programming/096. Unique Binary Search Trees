/*********************************************************************************
Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
*********************************************************************************/

//0ms
//100%
class Solution {
    public int numTrees(int n) {
        if(n == 0){
            return 0;
        }
        if(n == 1){
            return 1;
        }
        int[] res = new int[n+1];
        res[0] = 1;
        res[1] = 1;
        for(int i = 2; i < n+1; i++){
            int ind = i-1;
            res[i] = 0;
            while(ind * 2 >= i-1){
                if(ind * 2 == i-1){
                    res[i] = res[i] + res[ind] * res[ind];
                    break;
                }
                res[i] = res[i] + res[ind] * res[i-1-ind] * 2;
                ind--;
            }
        }
        return res[n];
    }
}
