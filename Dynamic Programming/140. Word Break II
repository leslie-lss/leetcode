/******************************************************************************************/
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]
Example 2:

Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]
*******************************************************************************************/

//6ms
//97.23%
class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
        List<String> res = new ArrayList<String>();
        if(s == "" || s == null){
            return res;
        }
        HashMap<String, List<String>> ready = new HashMap<String, List<String>>();
        return solution(s, wordDict, ready);  
    }
    public List<String> solution(String s, List<String> wordDict, HashMap<String, List<String>> map){
        List<String> res = new ArrayList<String>();
        if(map.containsKey(s)){
            return map.get(s);
        }
        if(s.length() == 0){
            res.add("");
            return res;
        }
        for(int i = 0; i < wordDict.size(); i++){
            String word = wordDict.get(i);
            if(s.startsWith(word)){
                List<String> res_temp = solution(s.substring(word.length()), wordDict, map);
                for(String x : res_temp){
                    if(x.isEmpty()){
                        res.add(word + "" + x);
                    }else{
                        res.add(word + " " + x);
                    }
                }
            }
        }
        map.put(s, res);
        return res;
    }
}
