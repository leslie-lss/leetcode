/************************************************************************************************
Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

Example:

Input: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

Output: 4
************************************************************************************************/

//10ms
//46.49%
class Solution {
    public int maximalSquare(char[][] matrix) {
        if(matrix.length == 0 || matrix == null)
            return 0;
        int m = matrix.length;
        int n = matrix[0].length;
        int max = 0;
        for(int i = 0; i < m - max; i++){
            for(int j = 0; j < n - max;j++){
                int temp_max = findSquare(matrix, i, j);
                max = max > temp_max ? max : temp_max;
            }
        }
        return max*max;
    }
    public int findSquare(char[][] matrix, int row, int col){
        int m = matrix.length;
        int n = matrix[0].length;
        if(matrix[row][col] == '0')
            return 0;
        int max = 1;
        while(row + max < m && col + max < n){
            for(int i = 0; i <= max; i++){
                if(matrix[row+i][col+max] == '0' || matrix[row+max][col+i] == '0'){
                    return max;
                }
            }
            max++;
        }
        return max;
    }
}
