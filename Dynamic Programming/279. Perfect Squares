/***************************************************************************************************
Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.

Example 1:

Input: n = 12
Output: 3 
Explanation: 12 = 4 + 4 + 4.
Example 2:

Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.
***************************************************************************************************/

//401ms
//9.48%
class Solution {
    public int numSquares(int n) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        map.put(1,1);
        map.put(0,0);
        return find(n,map);
    }
    public int find(int n, HashMap<Integer, Integer> map){
        if(map.containsKey(n))
            return map.get(n);
        int square = (int)Math.sqrt(n);
        int min = Integer.MAX_VALUE;
        for(int i = square; i >= 1; i--){
            int temp = find(n-i*i, map) + 1;
            min = min < temp ? min : temp;
        }
        map.put(n, min);
        return min;
    }
}
