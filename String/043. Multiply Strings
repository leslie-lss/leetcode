/***********************************************************************
Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"
Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"
Note:

The length of both num1 and num2 is < 110.
Both num1 and num2 contain only digits 0-9.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.
You must not use any built-in BigInteger library or convert the inputs to integer directly.
***********************************************************************/

//15ms
//76.11%
class Solution {
    public String multiply(String num1, String num2) {
        if(num1.length() == 0 || num2.length() == 0){
            return "0";
        }
        char[] ch1;
        char[] ch2;
        if(num1.length() >= num2.length()){
            ch1 = num1.toCharArray();
            ch2 = num2.toCharArray();
        }else{
            ch1 = num2.toCharArray();
            ch2 = num1.toCharArray();
        }
        char[] res = new char[ch1.length + ch2.length];
        for(int i = 0; i < res.length; i++){
            res[i] = '0';
        }
        for(int i = 0; i < ch2.length; i++){
            char[] temp = multiplyBit(ch1, ch2, i);
            res = add(res,temp);
        }
        int i = 0;
        while(res[i] == '0'){
            i++;
            if(i >= res.length){
                return "0";
            }
        }
        String result = new String(res);
        return result.substring(i, result.length());
    }
    public char[] multiplyBit(char[] ch1, char[] ch2, int i){
        char[] res = new char[ch1.length + ch2.length];
        for(int j = 0; j < res.length; j++){
            res[j] = '0';
        }
        int jinwei = 0;
        for(int j = 0; j < ch1.length; j++){
            int temp = (ch1[ch1.length - 1 - j] - 48)*(ch2[ch2.length - 1 - i] -48) + jinwei;
            res[res.length - 1 - i - j] = (char)(temp % 10 + 48);
            jinwei = temp / 10;
        }
        res[res.length - 1 - i - ch1.length] = (char)(jinwei + 48);
        return res;
    }
    public char[] add(char[] ch1, char[] ch2){
        int jinwei = 0;
        for(int i = ch1.length - 1; i >= 0; i--){
            int temp = (ch1[i] - 48) + (ch2[i] - 48) + jinwei;
            ch1[i] = (char)(temp % 10 + 48);
            jinwei = temp / 10;
        }
        return ch1;
    }
}
