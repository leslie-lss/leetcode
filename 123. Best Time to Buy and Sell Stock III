Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

//第一版：较难，参考网上的解题方法
//典型的动态规划，不好理解，建议多回顾几次
//15ms
//4.57%
class Solution {
    public int maxProfit(int[] prices) {
        int m = prices.length;
        if(m<=1){
            return 0;
        }
        int[][] local = new int[m][3];
        int[][] global = new int[m][3];
        for(int i=1;i<m;i++){
            int diff = prices[i]-prices[i-1];
            for(int j=1;j<=2;j++){
                local[i][j]=maxNum(global[i-1][j-1]+maxNum(diff,0),local[i-1][j]+diff);//更新局部，截止到第i天且第i天卖出的最大利润
                global[i][j]=maxNum(global[i-1][j],local[i][j]);//更新全局，截止到第i天的最大利润
            }
        }
        return global[m-1][2];
    }
    public int maxNum(int a,int b){
        if(a>=b){
            return a;
        }else{
            return b;
        }
    }
}
