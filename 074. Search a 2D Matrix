Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false

//第一版
//二分查询
//12ms
//48.37%
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        if(m == 0){
            return false;
        }
        int n = matrix[0].length;
        if(n == 0){
            return false;
        }
        int sum = m*n;
        return search(0,sum-1,matrix,target);
    }
    public boolean search(int head, int end, int[][] matrix, int target){
        int m = matrix.length;
        int n = matrix[0].length;
        int head_row = head / n;
        int head_col = head % n;
        int end_row = end / n;
        int end_col = end % n;
        if(matrix[head_row][head_col] == target || matrix[end_row][end_col] == target){
            return true;
        }
        if(matrix[head_row][head_col] > target || matrix[end_row][end_col] < target){
            return false;
        }
        int middle = head + (end - head) / 2;
        if(middle == head){
            return false;
        }
        int middle_row = middle / n;
        int middle_col = middle % n;
        if(matrix[middle_row][middle_col] < target){
            return search(middle,end,matrix,target);
        }else if(matrix[middle_row][middle_col] > target){
            return search(head,middle,matrix,target);
        }else{
            return true;
        }
    }
}
