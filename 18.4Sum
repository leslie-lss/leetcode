/*
    Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

    Note: The solution set must not contain duplicate quadruplets.

    For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

    A solution set is:
    [
      [-1,  0, 0, 1],
      [-2, -1, 1, 2],
      [-2,  0, 0, 2]
    ]
*/

//为找到符合要求的四个数的所有组合，其逻辑与之前的2、3Sum的较为相似
//首先对数组进行排序，之后在循环内进行查找
//相较之前复杂的是要更容易出现重复的情况，因此在每次查找之后都要排除重复的部分

//31ms
//81.46%
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> res = new LinkedList();
        for(int i = 0; i<nums.length-3;i++){
            if(nums[i]+nums[i+1]+nums[i+2]+nums[i+3]>target)
                break;
            if(nums[i]+nums[nums.length-1]+nums[nums.length-2]+nums[nums.length-3]<target)
                continue;
            for(int j = i+1; j<nums.length-2; j++){
                
                int lo = j+1;
                int hi = nums.length-1;
                while(lo<hi){
                    if(nums[i]+nums[j]+nums[lo]+nums[hi]>target){
                        while(lo<hi&&nums[hi]==nums[hi-1])
                            hi--;
                        hi--;
                    }else if(nums[i]+nums[j]+nums[lo]+nums[hi]<target){
                        while(lo<hi&&nums[lo]==nums[lo+1])
                            lo++;
                        lo++;
                    }else{
                        res.add(Arrays.asList(nums[i],nums[j],nums[lo],nums[hi]));
                        
                        while(lo<hi&&nums[hi]==nums[hi-1])
                            hi--;
                        while(lo<hi&&nums[lo]==nums[lo+1])
                            lo++;
                        hi--;
                        lo++;
                    }
                    
                }
                while(nums[j]==nums[j+1]&&j<nums.length-2){
                    j++;
                }
            }
            while(nums[i]==nums[i+1]&&i<nums.length-3){
                i++;
            }
        }
        return res;
    }
}
