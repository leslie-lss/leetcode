/*
    Say you have an array for which the ith element is the price of a given stock on day i.

    If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

    Example 1:

    Input: [7, 1, 5, 3, 6, 4]
    Output: 5

    max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)

    Example 2:

    Input: [7, 6, 4, 3, 1]
    Output: 0

    In this case, no transaction is done, i.e. max profit = 0.

*/
//数组代表每一天的股票价格，选择合适的买卖时间来通过买卖股票来获取最大的利益
//这个问题只要理清逻辑就好，这个方法还有待改进
//2.36%
//6ms
class Solution {
    public int maxProfit(int[] prices) {
        int low = 0;
        int high = 0;
        int len = prices.length;
        int max = 0;
        for(int i = 0; i<len-1;i++){
            low = i;
            if(prices[low]>=prices[low+1]){
                continue;
            }else{
                high = i+1;
                for(int j =i+2; j<len;j++){
                    if(prices[high]>prices[j]){
                        continue;
                    }else{
                        high = j;
                    }
                }
                int diff = prices[high]-prices[low];
                if(diff>max){
                    max=diff;
                }
            }
        }
        return max;
    }
}
