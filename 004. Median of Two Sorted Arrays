There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

//第一版
//报错
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 1
	at Solution.findMedianSortedArrays(Solution.java:30)
	at __DriverSolution__.__helper__(__Driver__.java:8)
	at __Driver__.main(__Driver__.java:54)
  
  
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m=nums1.length;
        int n=nums2.length;
        int median=(m+n)/2;
        double[] nums = new double[median];
        int flag1=0;
        int flag2=0;
        int flag=0;
        while(flag<=median){
            if(flag1>=m&&flag2>=n){//数组均为0
                return 0;
            }
            if(flag1>=m){
                nums[flag]=nums2[flag2];
                flag2++;
                flag++;
                continue;
            }
            if(flag2>=n){
                nums[flag]=nums1[flag1];
                flag1++;
                flag++;
                continue;
            }
            if(nums1[flag1]<=nums2[flag2]){
                nums[flag]=nums1[flag1];
                flag1++;
            }else{
                nums[flag]=nums2[flag2];
                flag2++;
            }
            flag++;
        }
        if((m+n)%2==1){
            return nums[median];
        }else{
            return (nums[median-1]+nums[median])/2;
        }
    }
}
