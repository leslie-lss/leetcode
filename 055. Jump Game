Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

Example 1:

Input: [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum
             jump length is 0, which makes it impossible to reach the last index.


//利用递归的思想，从后往前判定
//很满意此次自己想出的方法
//第一版
//8ms
//91.89%
class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        if(n<=1){
            return true;
        }
        return judge(nums,n-1);
    }
    public boolean judge(int[] nums,int target){
        int i = target-1;
        while(i>=0){
            if(nums[i]+i<target){
                if(i==0){
                    return false;
                }
                i--;
                continue;
            }else{
                return judge(nums,i);
            }
        }
        return true;
    }
}
