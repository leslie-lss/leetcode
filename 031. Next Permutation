Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place and use only constant extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

//输入数组可看做一个多位数,需要通过调整数组元素的位置,将数组调整为大于该多位数的最小数,如果该多位数已为最大,那就将数组逆序调整,即得到最小数
//解题思路:
//从后往前查,查到一个元素数值比后一个元素小,该元素位置为i,从i后边找到大于i位置元素的最小值,将其与i处的元素交换,最后将i位置后边的所有元素逆序
//bug:
//要排除掉数组元素个数为1,2的情况
//元素值相等的情况要谨慎处理例子[1,5,1],[2,3,1,3,3]


class Solution {
    public void nextPermutation(int[] nums) {
        int i=nums.length-1;
        if(i==0){
            return;
        }
        if(i==1){
            int temp0=nums[0];
            nums[0]=nums[1];
            nums[1]=temp0;
            return;
        }
        int replaceindex=0;
        while(nums[i]<=nums[i-1]){
            i--;
            if(i<=0){
                break;
            }
        }
        replaceindex=i;
        i--;
        if(i<0){
            //翻转数组
            int head1=0;
            int end1=nums.length-1;
            while(head1<end1){
                int temp1=nums[head1];
                nums[head1]=nums[end1];
                nums[end1]=temp1;
                head1++;
                end1--;
            }
        }else{
            //找大于i位置的最小值
            int j;
            for(j=i+2;j<nums.length;j++){
                if(nums[j]>nums[i]&&nums[j]<=nums[replaceindex]){
                    replaceindex=j;
                }
            }
            int temp;
            temp=nums[replaceindex];
            nums[replaceindex]=nums[i];
            nums[i]=temp;
            //翻转剩余的部分
            int head2=i+1;
            int end2=nums.length-1;
            while(head2<end2){
                int temp2=nums[head2];
                nums[head2]=nums[end2];
                nums[end2]=temp2;
                head2++;
                end2--;
            }
        }
    }
}
