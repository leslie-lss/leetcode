/*
    Given a sorted array and a target value, return the index if the target is found.
    If not, return the index where it would be if it were inserted in order.

    You may assume no duplicates in the array.

    Here are few examples.
    [1,3,5,6], 5 → 2
    [1,3,5,6], 2 → 1
    [1,3,5,6], 7 → 4
    [1,3,5,6], 0 → 0 
*/

//利用二分查找来进行定位

//5ms
//61.21%
class Solution {
    public int searchInsert(int[] nums, int target) {
        int lo = 0;
        int hi = nums.length-1;
        int mid = lo+(hi-lo)/2;
        if(hi<0){
            return 0;
        }
        if(target<=nums[lo]){
            return lo;
        }
        if(target>nums[hi]){
            return hi+1;
        }else if(target==nums[hi]){
            return  hi;
        }
        while(lo<hi){
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]>target){
                hi = mid;
            }else{
                lo =mid;
            }
            if(lo+1==hi){
                return hi;
            }
            mid = lo+(hi-lo)/2;
        }
        return 0;
    }
}

//第二版
//直接遍历，直到遇到比target大或等于的元素，返回该元素的位置即可
//5ms
//100%
class Solution {
    public int searchInsert(int[] nums, int target) {
        int i = 0;
        if(nums.length==0){
            return 0;
        }
        while(nums[i]<target){
            i++;
            if(i>=nums.length){
                break;
            }
        }
        return i;
    }
}
