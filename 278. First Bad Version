/*
     You are a product manager and currently leading a team to develop a new product. 
     Unfortunately, the latest version of your product fails the quality check. 
     Since each version is developed based on the previous version, all the versions after a bad version are also bad.

    Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, 
    which causes all the following ones to be bad.

    You are given an API bool isBadVersion(version) which will return whether version is bad. 
    Implement a function to find the first bad version. You should minimize the number of calls to the API. 
*/

//此题一个特殊点在与API中的方法isBadVersion(version)的使用次数要尽可能少，可能是因为检测是否为换版本需要复杂的运算
//不能使用暴力的for循环进行逐个的判定
//初步思想利用二分查找，逐步缩小范围，最后使得lo为好，hi为坏版本，且lo+1=hi，这样就可确定第一个坏版本为hi

//但是实现的代码出现超时的情况，出现超时的case有21亿以上的版本数（太大了吧）
//具体代码如下：
/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int lo = 1;
        int hi = n;
        while(lo+1<hi){
            int mid = (lo+hi)/2;
            if(isBadVersion(mid)){
                hi = mid;
            }else{
                lo = mid;
            }
        }
        if(hi==2){
            if(isBadVersion(1)){
                hi=1;
            }
        }
        return hi;
    }
}

//仔细分析，考虑是否是不断缩窄范围这样调用过多的API
//决定加入判定旁边的版本的好坏，直接确定查找的版本是否为第一个错误的版本
//还是出现问题（要哭了。。。）
/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int lo = 1;
        int hi = n;
        while(lo+1<hi){
            int mid = (lo+hi)/2;
            if(isBadVersion(mid)){
                hi = mid;
                if(!isBadVersion(mid-1)){
                    break;
                }
            }else{
                lo = mid;
                if(isBadVersion(mid+1)){
                    hi = mid+1;
                    break;
                }
            }
        }
        if(hi==2){
            if(isBadVersion(1)){
                hi=1;
            }
        }
        return hi;
    }
}

//找到超时原因了。。。
//不是因为算法复杂度过高，而是因为在利用mid=(lo+hi)/2来确定mid时，由于lo和hi都过高，导致二者之和超出int的范围，造成overflow
//应该改为mid=lo+（hi-lo）/2
//20ms
//15.18%
/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int lo = 1;
        int hi = n;
        while(lo+1<hi){
            int mid = lo+(hi-lo)/2;
            if(isBadVersion(mid)){
                hi = mid;
            }else{
                lo = mid;
            }
        }
        if(hi==2){
            if(isBadVersion(1)){
                hi=1;
            }
        }
        return hi;
    }
}
