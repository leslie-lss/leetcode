/*
    Reverse digits of an integer.

    Example1: x = 123, return 321
    Example2: x = -123, return -321

    Note:
    The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows. 
*/

//将整数的各位数字进行翻转，除了要确定整数的位数、每位对应的数字之外，还要确定其正负，判定是否溢出
//输入为int类型，其范围为-2^31～2^31-1，大约为21亿以内，因此输入的整数最多有十位
//其中要注意幂次运算函数Math.pow()返回值为double型，在整个程序中要注意double、int、long之间的转换

//42ms
//45.16%
class Solution {
    public int reverse(int x) {
        int[] num = new int[10];//存储十位数字
        boolean flag = true;
        if(x<0){
            flag=false;
        }
        x=Math.abs(x);
        for(int i = 0; i<num.length;i++){
            num[i]=x/(int)Math.pow(10,i)%10;
        }
        long res = 0;
        for(int j = 0;j<num.length;j++){
            res+=num[j]*Math.pow(10,9-j);//数字翻转
        }
        while(res%10==0){//高位为0的情况，在翻转后要除去0
            res=res/10;
            if(res==0){
                break;
            }
        }
        if(flag==false){
            res=-res;
        }
        if(res<-Math.pow(2,31)||res>Math.pow(2,31)-1){//溢出的情况，返回0
            return 0;
        }else{
            int result = (int)res;
            return result;
        }
    }
}
