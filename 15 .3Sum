/*
    Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

    Note: The solution set must not contain duplicate triplets.

    For example, given array S = [-1, 0, 1, 2, -1, -4],

    A solution set is:
    [
      [-1, 0, 1],
      [-1, -1, 2]
    ]
*/

//整体逻辑实现，但出现问题Time Limit Exceeded，原因为使用三个嵌套的for循环，在处理大规模的数组时，处理时间过长
//1、多个List的嵌套在定义时不能直接嵌套，应该为List<List<Integer>> b = new LinkedList<List<Integer>>();
//2、可以利用HashSet来对列表元素去重
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        int x = 0;
        int x1 = 0;
        int x2 = 0;
        int x3 = 0;
        List<List<Integer>> b = new LinkedList<List<Integer>>();
        for(int i=0;i<nums.length-2;i++){
            for(int j=i+1;j<nums.length-1;j++){
                for(int k=j+1;k<nums.length;k++){
                    if(nums[i]+nums[j]+nums[k]==0){
                        x1=nums[i];
                        x2=nums[j];
                        x3=nums[k];
                        if(x1>x2){
                            x=x2;
                            x2=x1;
                            x1=x;
                        }
                        if(x2>x3){
                            x=x3;
                            x3=x2;
                            x2=x;
                        }
                        if(x1>x2){
                            x=x2;
                            x2=x1;
                            x1=x;
                        }
                        List<Integer> a = new LinkedList<Integer>();
                        a.add(x1);
                        a.add(x2);
                        a.add(x3);
                        b.add(a);
                        break;
                    }
                }
            }
        }
        HashSet h = new HashSet(b);
        b.clear();
        b.addAll(h);
        return b;
    }
}

//想到方法来降低时间复杂度，利用two sum的解决方法，针对数组中的每个值，找到另外两个值使得两只之和为该值的负数
//但是不知道怎么解决重复值
//参考Discuss得到下列方法

//79ms
//78.34%
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new LinkedList();
        for(int i = 0; i<nums.length-2; i++){
            if(i==0||(i>0&&nums[i]!=nums[i-1])){
                int lo = i+1;
                int hi = nums.length-1;
                int sum = 0-nums[i];
                while(lo<hi){
                    if(nums[lo]+nums[hi]==sum){
                        res.add(Arrays.asList(nums[i],nums[lo],nums[hi]));
                        while(lo<hi&&nums[lo]==nums[lo+1])
                            lo++;
                        while(lo<hi&&nums[hi]==nums[hi-1])
                            hi--;
                        lo++;
                        hi--;
                    }else if(nums[lo]+nums[hi]>sum){
                        hi--;
                    }else{
                        lo++;
                    }
                }
            }
        }
        return res;
    }
}

//利用二分查找对方法进行优化，预计运行速度更快
//但是测试结果显示速度更慢。。。
//这个速度超出我的预想。
//分析其原因可能是因为这个问题要求找到所有的组合，在某一循环中，找到了满足条件的组合之后，不能直接跳过这一循环，而是要继续查询符合要求的组合。
//这只是个人分析，还不能确定其正确性。
//133ms
//12.65%
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new LinkedList();
        for(int i = 0; i<nums.length-2; i++){
            if(i==0||(i>0&&nums[i]!=nums[i-1])){
                int lo = i+1;
                int hi = nums.length-1;
                int sum = 0-nums[i];
                while(lo<hi){
                    if(nums[lo]+nums[hi]==sum){
                        res.add(Arrays.asList(nums[i],nums[lo],nums[hi]));
                        while(lo<hi&&nums[lo]==nums[lo+1])
                            lo++;
                        while(lo<hi&&nums[hi]==nums[hi-1])
                            hi--;
                        lo++;
                        hi--;
                    }else if(nums[lo]+nums[hi]>sum){
                        if(lo+1==hi)
                            break;
                        int mid = (lo+hi)/2;
                        while(hi!=mid){
                            int diff = nums[lo]+nums[mid]-sum;
                            int diff1 = nums[lo]+nums[mid+1]-sum;
                            if(diff>=0){
                                hi = mid;
                            }else{
                                if(diff1>0){
                                    hi = mid;
                                }else if(diff1==0){
                                    mid++;
                                    hi = mid;
                                }else{
                                    mid = (mid+hi)/2;
                                }
                            }
                        }
                    }else{
                        if(lo+1==hi)
                            break;
                        int mid = (lo+hi)/2;
                        while(lo!=mid){
                            int diff = nums[hi]+nums[mid]-sum;
                            int diff1 = nums[hi]+nums[mid-1]-sum;
                            if(diff<=0){
                                lo = mid;
                            }else{
                                if(diff1<0){
                                    lo = mid;
                                }else if(diff1==0){
                                    mid--;
                                    lo = mid;
                                }else{
                                    mid = (mid+lo)/2;
                                }
                            }
                        }
                    }
                }
            }
        }
        return res;
    }
}
