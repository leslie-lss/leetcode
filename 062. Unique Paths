A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?

Note: m and n will be at most 100.

Example 1:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right
Example 2:

Input: m = 7, n = 3
Output: 28

//这道题其实是一道高中的排列组合问题中的组合问题
//存在m-1个right和n-1个down，求出有多少个组合顺序
//所以这道题就是就C(下标 m+n-2)(上标 m-1或n-1)

//第一版报错
//原因：temp_fenmu过大，超出了int型的数值范围
class Solution {
    public int uniquePaths(int m, int n) {
        int right = m-1;
        int down = n-1;
        int sum = right+down;
        int min;
        if(right<=down){
            min = right;
        }else{
            min = down;
        }
        int temp_fenzi = 1;
        int temp_fenmu = 1;
        for(int i = 0; i < min; i++){
            temp_fenzi = temp_fenzi * (sum - i);
            temp_fenmu = temp_fenmu * (i + 1);
        }
        System.out.println(temp_fenzi);
        System.out.println(temp_fenmu);
        return temp_fenzi/temp_fenmu;
    }
}

//第二版  调整为long整型之后就不会出现上溢的情况
//0ms
//100%
class Solution {
    public int uniquePaths(int m, int n) {
        int right = m-1;
        int down = n-1;
        int sum = right+down;
        int min;
        if(right<=down){
            min = right;
        }else{
            min = down;
        }
        long temp = 1;
        for(int i = 0; i < min; i++){
            temp = temp * (sum-i) / (i+1);
        }
        return (int)temp;
    }
}
