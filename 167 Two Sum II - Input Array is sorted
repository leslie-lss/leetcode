/*
  Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

  The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.

  You may assume that each input would have exactly one solution and you may not use the same element twice.

  Input: numbers={2, 7, 11, 15}, target=9
  Output: index1=1, index2=2 
*/

//1ms
//41.33%
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int head = 0;
        int end = numbers.length-1;
        int left = 0;
        int right = 0;
        int diff = 0;
        while(head<end){
            diff = numbers[head]+numbers[end]-target;
            if(diff>0){
                end--;
            }else if(diff<0){
                head++;
            }else{
                left = head;
                right = end;
                break;
            }
        }
        int[] result = new int[2];
        result[0] = left+1;
        result[1] = right+1;
        return result;
    }
}

//
//嘤嘤嘤，有问题
//Time Limit Exceeded
//Teat Case
/*
[12,13,23,28,43,44,59,60,61,68,70,86,88,92,124,125,136,168,173,173,180,199,212,
221,227,230,277,282,306,314,316,321,
325,328,336,337,363,365,368,370,370,371,375,384,387,394,400,404,414,422,422,427,430,435,457,493,506,527,531,538,541,
546,568,583,585,587,650,652,677,691,730,737,740,751,755,764,778,783,
785,789,794,803,809,815,847,858,863,863,874,887,896,916,920,926,927,930,933,957,981,997]
542
*/
//result is 221 and 321.
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int head = 0;
        int end = numbers.length-1;
        int left = 0;
        int right = 0;
        int diff = 0;
        int diff_temp = 0;
        int diff_temp1 = 0;
        int middle = 0;
        while(head<end){
            diff = numbers[head]+numbers[end]-target;
            middle = (head+end)/2;
            if(diff>0){//调整end
                diff_temp = numbers[head]+numbers[middle]-target;
                if(diff_temp>0){
                    end = middle;
                }else if(diff_temp<0){
                    while(end!=middle){
                        diff_temp1 = numbers[head]+numbers[middle+1]-target;
                        if(diff_temp1>0){
                            end = middle;
                        }else if(diff_temp1==0){
                            middle++;
                            end = middle;
                            left = head;
                            right = end;
                        }else{
                            middle = (middle+end)/2;
                        }
                    }
                }else{
                    end = middle;
                    left = head;
                    right = end;
                }
            }else if(diff<0){//调整head
                diff_temp = numbers[middle]+numbers[end]-target;
                if(diff_temp<0){
                    head = middle;
                }else if(diff_temp>0){
                    while(head!=middle){
                        diff_temp1 = numbers[middle+1]+numbers[end]-target;
                        if(diff_temp1<0){
                            head = middle;
                        }else if(diff_temp1==0){
                            middle++;
                            head = middle;
                            left = head;
                            right = end;
                        }else{
                            middle = (head+middle)/2;
                        }
                    }
                }else{
                    head = middle;
                    left = head;
                    right = end;
                }
            }else{//刚好找到
                left = head;
                right = end;
            }
            if(right!=0){
                break;
            }
        }
        int[] result = new int[2];
        result[0] = left+1;
        result[1] = right+1;
        return result;
    }
}
